name: Multi-Platform Conda Environment Test

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'environment.yml'
      - 'setup_conda_env.sh'
      - '.github/workflows/conda-*.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'environment.yml'
      - 'setup_conda_env.sh'
      - '.github/workflows/conda-*.yml'
  workflow_dispatch:

jobs:
  test-conda-environment:
    name: Test Conda Environment
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11"]
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        miniconda-version: "latest"
        python-version: ${{ matrix.python-version }}
        channels: conda-forge,defaults
        channel-priority: flexible
        activate-environment: ""
    
    - name: Test environment creation
      shell: bash -l {0}
      run: |
        echo "=== Testing environment creation on ${{ matrix.os }} with Python ${{ matrix.python-version }} ==="
        
        # Create environment from yml file
        conda env create -f environment.yml -n test-env-${{ matrix.python-version }}
        
        echo "=== Environment created successfully ==="
        conda env list
    
    - name: Test environment activation and dependencies
      shell: bash -l {0}
      run: |
        echo "=== Testing environment activation ==="
        conda activate test-env-${{ matrix.python-version }}
        
        echo "=== Checking Python version ==="
        python --version
        
        echo "=== Testing key dependencies ==="
        # Test build tools
        cmake --version || echo "❌ CMake missing"
        
        # Test compilers (skip on macOS as it may not have gfortran by default)
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          gfortran --version || echo "❌ Fortran compiler missing"
        fi
        
        # Test MPI
        mpirun --version || echo "❌ MPI missing"
        
        # Test Python packages
        python -c "import numpy; print(f'✅ NumPy {numpy.__version__}')"
        python -c "import scipy; print(f'✅ SciPy {scipy.__version__}')"
        python -c "import matplotlib; print(f'✅ Matplotlib {matplotlib.__version__}')"
        python -c "import h5py; print(f'✅ h5py {h5py.__version__}')"
        python -c "import yaml; print(f'✅ PyYAML {yaml.__version__}')"
    
    - name: Test conda environment export
      shell: bash -l {0}
      run: |
        echo "=== Testing environment export ==="
        conda activate test-env-${{ matrix.python-version }}
        conda env export > exported-env-${{ matrix.os }}-py${{ matrix.python-version }}.yml
        
        echo "=== Exported environment file ==="
        head -20 exported-env-${{ matrix.os }}-py${{ matrix.python-version }}.yml
    
    - name: Upload exported environment
      uses: actions/upload-artifact@v4
      with:
        name: exported-env-${{ matrix.os }}-py${{ matrix.python-version }}
        path: exported-env-${{ matrix.os }}-py${{ matrix.python-version }}.yml
        retention-days: 7
    
    - name: Cleanup
      shell: bash -l {0}
      run: |
        echo "=== Cleaning up test environment ==="
        conda env remove -n test-env-${{ matrix.python-version }} -y || true

  test-setup-script:
    name: Test Setup Script
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        miniconda-version: "latest"
        activate-environment: ""
    
    - name: Test automated setup script
      shell: bash -l {0}
      run: |
        echo "=== Testing setup_conda_env.sh script ==="
        
        # Make script executable
        chmod +x setup_conda_env.sh
        
        # Run script in non-interactive mode
        echo "y" | timeout 300 ./setup_conda_env.sh || echo "Script completed or timed out"
        
        # Verify environment was created
        conda env list
        
        # Test if environment is functional
        if conda env list | grep -q "specfwat-env"; then
          echo "✅ Environment created successfully"
          conda activate specfwat-env
          python -c "import numpy; print('✅ Environment is functional')"
        else
          echo "❌ Environment creation failed"
          exit 1
        fi