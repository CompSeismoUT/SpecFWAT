# objs
set(CMAKE_Fortran_MODULE_DIRECTORY ${CMAKE_BINARY_DIR}/modules)
find_package(MPI REQUIRED)
include_directories(
  ${PROJECT_SOURCE_DIR}/include
)
set(SPECFEM_DIR ${PROJECT_SOURCE_DIR}/src/specfem3d)

# shared_objs
file(GLOB SOURCES_Fortran "${SPECFEM_DIR}/src/shared/*.f90")
file(GLOB SOURCES_C "${SPECFEM_DIR}/src/shared/*.c")
list(FILTER SOURCES_Fortran EXCLUDE REGEX "${SPECFEM_DIR}/src/shared/merge_sort.f90")
if(USE_SERIAL)
  list(FILTER SOURCES_Fortran EXCLUDE REGEX "${SPECFEM_DIR}/src/shared/parallel.f90")
else()
  list(FILTER SOURCES_Fortran EXCLUDE REGEX "${SPECFEM_DIR}/src/shared/serial.f90")
  set(MPI_LIBRARIES MPI::MPI_Fortran)
endif()
if(NOT (USE_ADIOS AND USE_ADIOS2))
  list(FILTER SOURCES_Fortran EXCLUDE REGEX "^.*/adios_.*$")
  list(FILTER SOURCES_C EXCLUDE REGEX "^.*/adios_.*$")
  list(APPEND SOURCES_Fortran "${SPECFEM_DIR}/src/shared/adios_manager.F90")
  list(APPEND SOURCES_C "${SPECFEM_DIR}/src/shared/adios_method_stubs.c")
endif()
if (USE_ASDF)
  list(FILTER SOURCES_Fortran EXCLUDE REGEX "^.*/asdf_.*_stubs.*$")
  list(FILTER SOURCES_C EXCLUDE REGEX "^.*/asdf_.*_stubs.*$")
else()
  list(FILTER SOURCES_Fortran EXCLUDE REGEX "^.*/asdf_manager.*$")
endif()
add_library(shared_objs OBJECT ${SOURCES_Fortran} ${SOURCES_C})
target_link_libraries(shared_objs PRIVATE ${MPI_LIBRARIES})

# CUDA
if (USE_CUDA)
  set(CUDA_FLAGS "-lcudart -lcuda -lcublas -lstdc++")
  set(CUDA_INC "-I${CUDA_INCLUDE_DIRS}")
  set(CUDA_LINK "${CUDA_LIBRARIES}")

  if (CUDA_VERSION_MAJOR EQUAL 12)
      set(GENCODE "-gencode=arch=compute_90,code=sm_90")
      add_definitions(-DGPU_DEVICE_Hopper)
  elseif (CUDA_VERSION_MAJOR EQUAL 11)
      set(GENCODE "-gencode=arch=compute_80,code=sm_80")
      add_definitions(-DGPU_DEVICE_Ampere)
  elseif (CUDA_VERSION_MAJOR EQUAL 10)
      set(GENCODE "-gencode=arch=compute_75,code=sm_75")
      add_definitions(-DGPU_DEVICE_Turing)
  elseif (CUDA_VERSION_MAJOR EQUAL 9)
      set(GENCODE "-gencode=arch=compute_70,code=sm_70")
      add_definitions(-DGPU_DEVICE_Volta)
  elseif (CUDA_VERSION_MAJOR EQUAL 8)
      set(GENCODE "-gencode=arch=compute_60,code=sm_60")
      add_definitions(-DGPU_DEVICE_Pascal)
  elseif (CUDA_VERSION_MAJOR EQUAL 7)
      set(GENCODE "-gencode=arch=compute_52,code=sm_52")
      add_definitions(-DGPU_DEVICE_Maxwell)
  elseif (CUDA_VERSION_MAJOR EQUAL 6)
      set(GENCODE "-gencode=arch=compute_37,code=sm_37")
      add_definitions(-DGPU_DEVICE_K80)
  elseif (CUDA_VERSION_MAJOR EQUAL 5)
      set(GENCODE "-gencode=arch=compute_35,code=sm_35")
      add_definitions(-DGPU_DEVICE_K20)
  elseif (CUDA_VERSION_MAJOR EQUAL 4)
      set(GENCODE "-gencode=arch=compute_30,code=sm_30")
  else()
      set(GENCODE "-gencode=arch=compute_20,code=sm_20")
  endif()
  set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} ${CUDA_FLAGS} ${CUDA_INC} ${GENCODE}")
  file(GLOB SOURCES_CUDA "${SPECFEM_DIR}/src/gpu/*.c*")
  file(GLOB SOURCES_CUDA_KERNELS "${SPECFEM_DIR}/src/gpu/kernels/*.c*")
  add_library(cuda_objs OBJECT ${SOURCES_CUDA} ${SOURCES_CUDA_KERNELS})
  target_include_directories(cuda_obj PRIVATE ${SPECFEM_DIR}/gpu ${SPECFEM_DIR}/gpu/kernels)
else()
  set(SOURCES_CUDA "${SPECFEM_DIR}/src/gpu/specfem3D_gpu_cuda_method_stubs.c")
  add_library(cuda_objs OBJECT ${SOURCES_CUDA})
endif()

# meshfem3D_objs
file(GLOB SOURCES_Fortran "${SPECFEM_DIR}/src/meshfem3D/*.[Ff]90")
file(GLOB SOURCES_C "${SPECFEM_DIR}/src/meshfem3D/*.c")
list(FILTER SOURCES_Fortran EXCLUDE REGEX "${SPECFEM_DIR}/src/meshfem3D/meshfem3D.F90")
if(NOT (USE_ADIOS AND USE_ADIOS2))
  list(FILTER SOURCES_Fortran EXCLUDE REGEX "^.*/.*adios.*$")
endif()
add_library(meshfem3D_objs OBJECT ${SOURCES_Fortran} ${SOURCES_C})
target_link_libraries(meshfem3D_objs PRIVATE shared_objs)

# generate_databases_objs
file(GLOB SOURCES_Fortran "${SPECFEM_DIR}/src/generate_databases/*.[Ff]90")
file(GLOB SOURCES_C "${SPECFEM_DIR}/src/generate_databases/*.c")
list(FILTER SOURCES_Fortran EXCLUDE REGEX "${SPECFEM_DIR}/src/generate_databases/generate_databases.f90")
if(USE_SERIAL)
  list(FILTER SOURCES_Fortran EXCLUDE REGEX "${SPECFEM_DIR}/src/generate_databases/model_sep.f90")
else()
  list(FILTER SOURCES_Fortran EXCLUDE REGEX "${SPECFEM_DIR}/src/generate_databases/model_sep_nompi.f90")
endif()
if(NOT (USE_ADIOS AND USE_ADIOS2))
  list(FILTER SOURCES_Fortran EXCLUDE REGEX "^.*/.*adios.*$")
endif()
add_library(generate_databases_objs OBJECT ${SOURCES_Fortran} ${SOURCES_C})
target_link_libraries(generate_databases_objs PRIVATE shared_objs)

# specfem3D_objs
file(GLOB SOURCES_Fortran "${SPECFEM_DIR}/src/specfem3D/*.[Ff]90")
file(GLOB SOURCES_C "${SPECFEM_DIR}/src/specfem3D/*.c*")
list(FILTER SOURCES_Fortran EXCLUDE REGEX "${SPECFEM_DIR}/src/specfem3D/specfem3D.F90")
if(NOT (USE_ADIOS AND USE_ADIOS2))
  list(FILTER SOURCES_Fortran EXCLUDE REGEX "^.*/.*adios.*$")
endif()
if (NOT USE_ASDF)
  list(FILTER SOURCES_Fortran EXCLUDE REGEX "^.*/.*ASDF.*$")
endif()
add_library(specfem3D_objs OBJECT ${SOURCES_Fortran} ${SOURCES_C})
target_link_libraries(specfem3D_objs PRIVATE shared_objs)

# ==============================================================================
# ----------------------------- Add executables -------------------------------
# ==============================================================================
set(APP_SOURCES
  "${SPECFEM_DIR}/src/meshfem3D/meshfem3D.F90"
  "${SPECFEM_DIR}/src/generate_databases/generate_databases.f90"
  "${SPECFEM_DIR}/src/specfem3D/specfem3D.F90"
) 
foreach(execsourcefile ${APP_SOURCES})
  get_filename_component(EXEC_NAME ${execsourcefile} NAME_WE)
  add_executable(${EXEC_NAME} ${execsourcefile}
    ${SOURCES_SUBS} 
    ${HEADERS}
  )
  set_target_properties(${EXEC_NAME} PROPERTIES PREFIX "x")
  target_link_libraries(${EXEC_NAME} PUBLIC "${EXEC_NAME}_objs" shared_objs cuda_objs ${MPI_LIBRARIES})
  set_target_properties(${EXEC_NAME} PROPERTIES LINKER_LANGUAGE Fortran)
endforeach()